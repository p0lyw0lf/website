diff --git a/dist/index.js b/dist/index.js
index 474796e1d82e25946025e161cc5eb5e555c5eccd..c70c0ab7f82e72cee42a0f3766d0e725c6fe5648 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -109,7 +109,8 @@ async function createMarkdownProcessor(opts) {
         code: String(result.value),
         metadata: {
           headings: result.data.astro?.headings ?? [],
-          imagePaths: result.data.astro?.imagePaths ?? [],
+          localImagePaths: result.data.astro?.localImagePaths ?? [],
+          remoteImagePaths: result.data.astro?.remoteImagePaths ?? [],
           frontmatter: result.data.astro?.frontmatter ?? {}
         }
       };
diff --git a/dist/rehype-images.js b/dist/rehype-images.js
index 5a80264a3c9790096da7b9b0d5301fd72ab8c9e2..d7d8ad947378f754b1042f8456e2c31213a53ace 100644
--- a/dist/rehype-images.js
+++ b/dist/rehype-images.js
@@ -7,7 +7,7 @@ function rehypeImages() {
       if (node.tagName !== "img") return;
       if (node.properties?.src) {
         node.properties.src = decodeURI(node.properties.src);
-        if (file.data.astro?.imagePaths?.includes(node.properties.src)) {
+        if (file.data.astro?.localImagePaths?.includes(node.properties.src)) {
           const { ...props } = node.properties;
           const index = imageOccurrenceMap.get(node.properties.src) || 0;
           imageOccurrenceMap.set(node.properties.src, index + 1);
@@ -15,6 +15,18 @@ function rehypeImages() {
           Object.keys(props).forEach((prop) => {
             delete node.properties[prop];
           });
+        } else if (file.data.astro?.remoteImagePaths?.includes(node.properties.src)) {
+          const { ...props } = node.properties;
+          const index = imageOccurrenceMap.get(node.properties.src) || 0;
+          imageOccurrenceMap.set(node.properties.src, index + 1);
+          node.properties["__ASTRO_IMAGE_"] = JSON.stringify({
+            inferSize: "width" in props && "height" in props ? void 0 : true,
+            ...props,
+            index
+          });
+          Object.keys(props).forEach((prop) => {
+            delete node.properties[prop];
+          });
         }
       }
     });
diff --git a/dist/remark-collect-images.d.ts b/dist/remark-collect-images.d.ts
index 620f28812cf448f94de8edcd59f4b3277e2850eb..492d0d9080617ea85a2a7855895f847a15784252 100644
--- a/dist/remark-collect-images.d.ts
+++ b/dist/remark-collect-images.d.ts
@@ -1,2 +1,3 @@
+import type { Root } from 'mdast';
 import type { VFile } from 'vfile';
-export declare function remarkCollectImages(): (tree: any, vfile: VFile) => void;
+export declare function remarkCollectImages(): (tree: Root, vfile: VFile) => void;
diff --git a/dist/remark-collect-images.js b/dist/remark-collect-images.js
index f6c26ed3ff06d16aca6943434541fc56dab458e2..fbb978695abfb059f89a7b4033059dc6252ff5c3 100644
--- a/dist/remark-collect-images.js
+++ b/dist/remark-collect-images.js
@@ -4,26 +4,27 @@ function remarkCollectImages() {
   return function(tree, vfile) {
     if (typeof vfile?.path !== "string") return;
     const definition = definitions(tree);
-    const imagePaths = /* @__PURE__ */ new Set();
-    visit(tree, ["image", "imageReference"], (node) => {
+    const localImagePaths = /* @__PURE__ */ new Set();
+    const remoteImagePaths = /* @__PURE__ */ new Set();
+    visit(tree, (node) => {
+      let url;
       if (node.type === "image") {
-        if (shouldOptimizeImage(node.url)) imagePaths.add(decodeURI(node.url));
-      }
-      if (node.type === "imageReference") {
+        url = decodeURI(node.url);
+      } else if (node.type === "imageReference") {
         const imageDefinition = definition(node.identifier);
         if (imageDefinition) {
-          if (shouldOptimizeImage(imageDefinition.url))
-            imagePaths.add(decodeURI(imageDefinition.url));
+          url = decodeURI(imageDefinition.url);
         }
       }
+      if (!url) return;
+      else if (isValidUrl(url)) remoteImagePaths.add(url);
+      else if (!url.startsWith("/")) localImagePaths.add(url);
     });
     vfile.data.astro ??= {};
-    vfile.data.astro.imagePaths = Array.from(imagePaths);
+    vfile.data.astro.localImagePaths = Array.from(localImagePaths);
+    vfile.data.astro.remoteImagePaths = Array.from(remoteImagePaths);
   };
 }
-function shouldOptimizeImage(src) {
-  return !isValidUrl(src) && !src.startsWith("/");
-}
 function isValidUrl(str) {
   try {
     new URL(str);
diff --git a/dist/types.d.ts b/dist/types.d.ts
index d28e0a02d81ec514320b78c894a4d603ba33c256..e9e4326afc0f2868128ae0ac0dfc58199a4a2376 100644
--- a/dist/types.d.ts
+++ b/dist/types.d.ts
@@ -9,7 +9,8 @@ declare module 'vfile' {
     interface DataMap {
         astro: {
             headings?: MarkdownHeading[];
-            imagePaths?: string[];
+            localImagePaths?: string[];
+            remoteImagePaths?: string[];
             frontmatter?: Record<string, any>;
         };
     }
@@ -42,7 +43,8 @@ export interface MarkdownProcessorRenderResult {
     code: string;
     metadata: {
         headings: MarkdownHeading[];
-        imagePaths: string[];
+        localImagePaths: string[];
+        remoteImagePaths: string[];
         frontmatter: Record<string, any>;
     };
 }
