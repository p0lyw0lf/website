diff --git a/components/Image.astro b/components/Image.astro
index a74c40332ea348a12ec80546f5d8cf6d4fcff27e..709e4fe6815918846168c45fd0d22815896cd293 100644
--- a/components/Image.astro
+++ b/components/Image.astro
@@ -1,7 +1,6 @@
 ---
 import { type LocalImageProps, type RemoteImageProps, getImage, imageConfig } from 'astro:assets';
 import type { UnresolvedImageTransform } from '../dist/assets/types';
-import { applyResponsiveAttributes } from '../dist/assets/utils/imageAttributes.js';
 import { AstroError, AstroErrorData } from '../dist/core/errors/index.js';
 import type { HTMLAttributes } from '../types';
 
@@ -46,14 +45,7 @@ if (import.meta.env.DEV) {
 	additionalAttributes['data-image-component'] = 'true';
 }
 
-const { class: className, ...attributes } = useResponsive
-	? applyResponsiveAttributes({
-			layout,
-			image,
-			props,
-			additionalAttributes,
-		})
-	: { ...additionalAttributes, ...image.attributes };
+const { class: className, ...attributes } = { ...additionalAttributes, ...image.attributes };
 ---
 
 {/* Applying class outside of the spread prevents it from applying unnecessary astro-* classes */}
diff --git a/components/Picture.astro b/components/Picture.astro
index 139681b51a06322a7cd2acc1b8b22c145b4aef38..08d7e1cd3bc1d2cb4888cdc0fd073f8d13642876 100644
--- a/components/Picture.astro
+++ b/components/Picture.astro
@@ -1,8 +1,7 @@
 ---
 import { type LocalImageProps, type RemoteImageProps, getImage, imageConfig } from 'astro:assets';
 import * as mime from 'mrmime';
-import { applyResponsiveAttributes } from '../dist/assets/utils/imageAttributes';
-import { isESMImportedImage, resolveSrc } from '../dist/assets/utils/imageKind';
+import { isESMImportedImage, resolveSrc } from '../dist/assets/utils/imageKind.js';
 import { AstroError, AstroErrorData } from '../dist/core/errors/index.js';
 import type {
 	GetImageResult,
@@ -101,18 +100,14 @@ if (fallbackImage.srcSet.values.length > 0) {
 	imgAdditionalAttributes.srcset = fallbackImage.srcSet.attribute;
 }
 
-const { class: className, ...attributes } = useResponsive
-	? applyResponsiveAttributes({
-			layout,
-			image: fallbackImage,
-			props,
-			additionalAttributes: imgAdditionalAttributes,
-		})
-	: { ...imgAdditionalAttributes, ...fallbackImage.attributes };
-
 if (import.meta.env.DEV) {
 	imgAdditionalAttributes['data-image-component'] = 'true';
 }
+
+const { class: className, ...attributes } = {
+	...imgAdditionalAttributes,
+	...fallbackImage.attributes,
+};
 ---
 
 <picture {...pictureAttributes}>
diff --git a/dist/assets/internal.js b/dist/assets/internal.js
index 15294150010318f2a7d118d10be2b399d282794b..3339c8f484d351a5726cb3d15f381144ea5f7412 100644
--- a/dist/assets/internal.js
+++ b/dist/assets/internal.js
@@ -13,6 +13,7 @@ import {
 } from "./types.js";
 import { isESMImportedImage, isRemoteImage, resolveSrc } from "./utils/imageKind.js";
 import { inferRemoteSize } from "./utils/remoteProbe.js";
+import { addCSSVarsToStyle, cssFitValues } from "./utils/imageAttributes.js";
 async function getConfiguredImageService() {
   if (!globalThis?.astroAsset?.imageService) {
     const { default: service } = await import(
@@ -108,6 +109,18 @@ async function getImage(options, imageConfig) {
     }
     delete resolvedOptions.priority;
     delete resolvedOptions.densities;
+    if (layout !== "none") {
+      resolvedOptions.style = addCSSVarsToStyle(
+        {
+          w: String(resolvedOptions.width),
+          h: String(resolvedOptions.height),
+          fit: cssFitValues.includes(resolvedOptions.fit ?? "") && resolvedOptions.fit,
+          pos: resolvedOptions.position
+        },
+        resolvedOptions.style
+      );
+      resolvedOptions["data-astro-image"] = layout;
+    }
   }
   const validatedOptions = service.validateOptions ? await service.validateOptions(resolvedOptions, imageConfig) : resolvedOptions;
   const srcSetTransforms = service.getSrcSet ? await service.getSrcSet(validatedOptions, imageConfig) : [];
diff --git a/dist/assets/utils/imageAttributes.d.ts b/dist/assets/utils/imageAttributes.d.ts
index 5f3e28f8b31a2072aa0ef90cfa1c30024da08f65..bf5c33a6944f585e610ff085150115e85a0d0237 100644
--- a/dist/assets/utils/imageAttributes.d.ts
+++ b/dist/assets/utils/imageAttributes.d.ts
@@ -1,10 +1,2 @@
-import type { GetImageResult, ImageLayout, LocalImageProps, RemoteImageProps } from '../types.js';
+export declare const cssFitValues: string[];
 export declare function addCSSVarsToStyle(vars: Record<string, string | false | undefined>, styles?: string | Record<string, any>): string;
-export declare function applyResponsiveAttributes<T extends LocalImageProps<unknown> | RemoteImageProps<unknown>>({ layout, image, props, additionalAttributes, }: {
-    layout: Exclude<ImageLayout, 'none'>;
-    image: GetImageResult;
-    additionalAttributes: Record<string, any>;
-    props: T;
-}): {
-    [x: string]: any;
-};
diff --git a/dist/assets/utils/imageAttributes.js b/dist/assets/utils/imageAttributes.js
index 38f9eb9a6fe2cc75b65fb5fa17d90abee09275de..06d06a588707ef3df484bdc16348043f5b9b7dca 100644
--- a/dist/assets/utils/imageAttributes.js
+++ b/dist/assets/utils/imageAttributes.js
@@ -1,4 +1,5 @@
 import { toStyleString } from "../../runtime/server/render/util.js";
+const cssFitValues = ["fill", "contain", "cover", "scale-down"];
 function addCSSVarsToStyle(vars, styles) {
   const cssVars = Object.entries(vars).filter(([_, value]) => value !== void 0 && value !== false).map(([key, value]) => `--${key}: ${value};`).join(" ");
   if (!styles) {
@@ -7,27 +8,7 @@ function addCSSVarsToStyle(vars, styles) {
   const style = typeof styles === "string" ? styles : toStyleString(styles);
   return `${cssVars} ${style}`;
 }
-const cssFitValues = ["fill", "contain", "cover", "scale-down"];
-function applyResponsiveAttributes({
-  layout,
-  image,
-  props,
-  additionalAttributes
-}) {
-  const attributes = { ...additionalAttributes, ...image.attributes };
-  attributes.style = addCSSVarsToStyle(
-    {
-      w: image.attributes.width ?? props.width ?? image.options.width,
-      h: image.attributes.height ?? props.height ?? image.options.height,
-      fit: cssFitValues.includes(props.fit ?? "") && props.fit,
-      pos: props.position
-    },
-    attributes.style
-  );
-  attributes["data-astro-image"] = layout;
-  return attributes;
-}
 export {
   addCSSVarsToStyle,
-  applyResponsiveAttributes
+  cssFitValues
 };
diff --git a/dist/content/runtime.js b/dist/content/runtime.js
index 8857ca8c1a9c16e086f2f43937dbb3a0772c53ad..f9b56de39669592f6736d53bcfb69f3c7cfb4371 100644
--- a/dist/content/runtime.js
+++ b/dist/content/runtime.js
@@ -298,12 +298,17 @@ async function updateImageReferencesInBody(html, fileName) {
   for (const [_full, imagePath] of html.matchAll(CONTENT_LAYER_IMAGE_REGEX)) {
     try {
       const decodedImagePath = JSON.parse(imagePath.replaceAll("&#x22;", '"'));
-      const id = imageSrcToImportId(decodedImagePath.src, fileName);
-      const imported = imageAssetMap.get(id);
-      if (!id || imageObjects.has(id) || !imported) {
-        continue;
+      let image;
+      if (validURL(decodedImagePath.src)) {
+        image = await getImage(decodedImagePath);
+      } else {
+        const id = imageSrcToImportId(decodedImagePath.src, fileName);
+        const imported = imageAssetMap.get(id);
+        if (!id || imageObjects.has(id) || !imported) {
+          continue;
+        }
+        image = await getImage({ ...decodedImagePath, src: imported });
       }
-      const image = await getImage({ ...decodedImagePath, src: imported });
       imageObjects.set(imagePath, image);
     } catch {
       throw new Error(`Failed to parse image reference: ${imagePath}`);
@@ -322,6 +327,14 @@ async function updateImageReferencesInBody(html, fileName) {
     }).map(([key, value]) => value ? `${key}=${JSON.stringify(String(value))}` : "").join(" ");
   });
 }
+function validURL(src) {
+  try {
+    new URL(src);
+    return true;
+  } catch {
+    return false;
+  }
+}
 function updateImageReferencesInData(data, fileName, imageAssetMap) {
   return new Traverse(data).map(function(ctx, val) {
     if (typeof val === "string" && val.startsWith(IMAGE_IMPORT_PREFIX)) {
diff --git a/dist/vite-plugin-markdown/content-entry-type.js b/dist/vite-plugin-markdown/content-entry-type.js
index 283d6c59ada7daa3500e0027b8d6a5e16455801f..584ddd23dd1ed124d8059a9dbcbb64404c1d8887 100644
--- a/dist/vite-plugin-markdown/content-entry-type.js
+++ b/dist/vite-plugin-markdown/content-entry-type.js
@@ -24,7 +24,10 @@ const markdownContentEntryType = {
       });
       return {
         html: result.code,
-        metadata: result.metadata
+        metadata: {
+          ...result.metadata,
+          imagePaths: result.metadata.localImagePaths.concat(result.metadata.remoteImagePaths)
+        }
       };
     };
   }
diff --git a/dist/vite-plugin-markdown/images.d.ts b/dist/vite-plugin-markdown/images.d.ts
index e3a7f309fb04c5f34de6ad404158a1419082dfd9..2fd6d05c90061eef3e08cdaeb6886c8812e34665 100644
--- a/dist/vite-plugin-markdown/images.d.ts
+++ b/dist/vite-plugin-markdown/images.d.ts
@@ -2,4 +2,4 @@ export type MarkdownImagePath = {
     raw: string;
     safeName: string;
 };
-export declare function getMarkdownCodeForImages(imagePaths: MarkdownImagePath[], html: string): string;
+export declare function getMarkdownCodeForImages(localImagePaths: MarkdownImagePath[], remoteImagePaths: string[], html: string): string;
diff --git a/dist/vite-plugin-markdown/images.js b/dist/vite-plugin-markdown/images.js
index 8937a52ad86067f229808616b99b4e755b53f254..734ee3b22b2a1db465bf4bb26a7d022caced3fbb 100644
--- a/dist/vite-plugin-markdown/images.js
+++ b/dist/vite-plugin-markdown/images.js
@@ -1,11 +1,11 @@
-function getMarkdownCodeForImages(imagePaths, html) {
+function getMarkdownCodeForImages(localImagePaths, remoteImagePaths, html) {
   return `
 			import { getImage } from "astro:assets";
-			${imagePaths.map((entry) => `import Astro__${entry.safeName} from ${JSON.stringify(entry.raw)};`).join("\n")}
+			${localImagePaths.map((entry) => `import Astro__${entry.safeName} from ${JSON.stringify(entry.raw)};`).join("\n")}
 
 			const images = async function(html) {
 					const imageSources = {};
-					${imagePaths.map((entry) => {
+					${localImagePaths.map((entry) => {
     const rawUrl = JSON.stringify(entry.raw);
     return `{
 											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + ${rawUrl.replace(
@@ -22,6 +22,23 @@ function getMarkdownCodeForImages(imagePaths, html) {
 													occurrenceCounter++;
 											}
 									}`;
+  }).join("\n")}
+					${remoteImagePaths.map((raw) => {
+    const rawUrl = JSON.stringify(raw);
+    return `{
+											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + ${rawUrl.replace(
+      /[.*+?^${}()|[\]\\]/g,
+      "\\\\$&"
+    )} + '[^"]*)"', 'g');
+											let match;
+											let occurrenceCounter = 0;
+											while ((match = regex.exec(html)) !== null) {
+													const matchKey = ${rawUrl} + '_' + occurrenceCounter;
+													const props = JSON.parse(match[1].replace(/&#x22;/g, '"'));
+													imageSources[matchKey] = await getImage(props);
+													occurrenceCounter++;
+											}
+									}`;
   }).join("\n")}
 					return imageSources;
 			};
diff --git a/dist/vite-plugin-markdown/index.js b/dist/vite-plugin-markdown/index.js
index 38f6a638c0489286918bf7ff202eec6e64824d25..7034fef20c86f472699e48d0a19d683dac966d18 100644
--- a/dist/vite-plugin-markdown/index.js
+++ b/dist/vite-plugin-markdown/index.js
@@ -55,12 +55,17 @@ function markdown({ settings, logger }) {
           throw new AstroError(AstroErrorData.InvalidFrontmatterInjectionError);
         }
         let html = renderResult.code;
-        const { headings, imagePaths: rawImagePaths, frontmatter } = renderResult.metadata;
+        const {
+          headings,
+          localImagePaths: rawLocalImagePaths,
+          remoteImagePaths,
+          frontmatter
+        } = renderResult.metadata;
         const isMarkdownPage = isPage(fileURL, settings);
         const charset = isMarkdownPage ? '<meta charset="utf-8">' : "";
-        const imagePaths = [];
-        for (const imagePath of rawImagePaths) {
-          imagePaths.push({
+        const localImagePaths = [];
+        for (const imagePath of rawLocalImagePaths) {
+          localImagePaths.push({
             raw: imagePath,
             safeName: shorthash(imagePath)
           });
@@ -80,7 +85,7 @@ function markdown({ settings, logger }) {
 				${layout ? `import Layout from ${JSON.stringify(layout)};` : ""}
 
 				${// Only include the code relevant to `astro:assets` if there's images in the file
-        imagePaths.length > 0 ? getMarkdownCodeForImages(imagePaths, html) : `const html = () => ${JSON.stringify(html)};`}
+        localImagePaths.length > 0 || remoteImagePaths.length > 0 ? getMarkdownCodeForImages(localImagePaths, remoteImagePaths, html) : `const html = () => ${JSON.stringify(html)};`}
 
 				export const frontmatter = ${JSON.stringify(frontmatter)};
 				export const file = ${JSON.stringify(fileId)};
