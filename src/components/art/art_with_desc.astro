---
import { Image } from "astro:assets";
import { ImageMetadata } from "./types/image";

interface ImageProps {
    src: ImageMetadata;
    dims?: {
      width: number;
      height: number;
    };
    alt: string;
    title?: string;
  }

export interface Props {
  images: ImageProps[];
}

const { images } = Astro.props as Props;

for (const key in images) {
  let image = images[key];
  let width = 256;
  let height = 256;
  if (image.dims) {
    ({width: width, height: height} = image.dims);
  }
    // Need to have custom way of shrinking image to fit inside both of these bounds, while preserving aspect ratio
  let new_width = (image.src.width * height) / image.src.height;
  let new_height = (image.src.height * width) / image.src.width;
  if (new_width < width) {
    width = new_width;
  } else {
    height = new_height;
  }
  image.dims = {width: Math.round(width), height: Math.round(height)};
}
---

<style>
  figure {
    width: 100%;
    margin-left: 0;
    margin-right: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  figure div {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-evenly;
    flex-wrap: wrap;
    gap: 1em;
    margin-top: 1em;
  }
</style>

<figure>
  <figcaption>
    <slot />
  </figcaption>
  <div>
  {images.map((image) => (
    <a href={image.src.src}><Image src={image.src} width={image.dims.width} height={image.dims.height} alt={image.alt} title={image.title} /></a>
  ))}
  </div>
</figure>
