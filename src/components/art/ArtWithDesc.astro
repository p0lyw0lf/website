---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

export interface ImageProps {
  src: ImageMetadata;
  dims?: {
    width: number;
    height: number;
  };
  alt: string;
  title?: string;
  eager?: boolean;
}

type ImagePropsWithDims = Omit<ImageProps, "dims"> &
  Required<Pick<ImageProps, "dims">>;

interface Props {
  flipped?: boolean;
  images: ImageProps[];
}

const { flipped, images: propImages } = Astro.props;
const images = propImages.map((image): ImagePropsWithDims => {
  let width = 256;
  let height = 256;
  if (image.dims) {
    ({ width: width, height: height } = image.dims);
  }
  // Need to have custom way of shrinking image to fit inside both of these bounds, while preserving aspect ratio
  let new_width = (image.src.width * height) / image.src.height;
  let new_height = (image.src.height * width) / image.src.width;
  if (new_width < width) {
    width = new_width;
  } else {
    height = new_height;
  }
  return {
    ...image,
    dims: { width: Math.round(width), height: Math.round(height) },
  };
});
---

<style>
  figure {
    width: 100%;
    margin: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  figure div {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-evenly;
    flex-wrap: wrap;
    gap: 1em;
    margin: 1em 0;
  }
</style>

<figure>
  {
    !flipped && (
      <figcaption>
        <slot />
      </figcaption>
    )
  }
  <div>
    {
      images.map((image) => (
        <a href={image.src.src}>
          <Image
            src={image.src}
            width={image.dims.width}
            height={image.dims.height}
            alt={image.alt}
            title={image.title}
            loading={image.eager ? "eager" : undefined}
          />
        </a>
      ))
    }
  </div>
  {
    flipped && (
      <figcaption>
        <slot />
      </figcaption>
    )
  }
</figure>
