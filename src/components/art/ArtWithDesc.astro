---
import { Image, inferRemoteSize } from "astro:assets";

export interface ImageProps {
  /**
   * URL relative to https://static.wolfgirl.dev/art/
   */
  src: string;
  /**
   * Optional dimenson override (defaults to max 256/256 in both directions)
   */
  dims?: {
    width: number;
    height: number;
  };
  alt: string;
  title?: string;
  eager?: boolean;
}

type ImagePropsWithDims = Omit<ImageProps, "dims" | "src"> &
  Required<Pick<ImageProps, "dims">> & { url: string };

interface Props {
  flipped?: boolean;
  images: ImageProps[];
}

const { flipped, images: propImages } = Astro.props;
const images = await Promise.all(
  propImages.map(async (image): Promise<ImagePropsWithDims> => {
    const url = `https://static.wolfgirl.dev/art/${image.src}`;
    const { width: remoteWidth, height: remoteHeight } =
      await inferRemoteSize(url);
    let width = 256;
    let height = 256;
    if (image.dims) {
      ({ width: width, height: height } = image.dims);
    }
    // Need to have custom way of shrinking image to fit inside both of these bounds, while preserving aspect ratio
    width = Math.min(width, (remoteWidth * height) / remoteHeight);
    height = Math.min(height, (remoteHeight * width) / remoteWidth);
    return {
      ...image,
      url,
      dims: { width: Math.round(width), height: Math.round(height) },
    };
  })
);
---

<style>
  figure {
    width: 100%;
    margin: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  figure div {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-evenly;
    flex-wrap: wrap;
    gap: 1em;
    margin: 1em 0;
  }
</style>

<figure>
  {
    !flipped && (
      <figcaption>
        <slot />
      </figcaption>
    )
  }
  <div>
    {
      images.map((image) => (
        <a href={image.url}>
          <Image
            src={image.url}
            width={image.dims.width}
            height={image.dims.height}
            alt={image.alt}
            title={image.title}
            loading={image.eager ? "eager" : undefined}
          />
        </a>
      ))
    }
  </div>
  {
    flipped && (
      <figcaption>
        <slot />
      </figcaption>
    )
  }
</figure>
