---
import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import Post from "../../templates/Post.astro";
import { type BlogData, toBlogData } from "../../data/blog";
import TagLink from "../../components/blog/TagLink.astro";
import { SITE_URL } from "../../data/url";

interface Props {
  post: Pick<CollectionEntry<"blog">, "render">;
  data: BlogData;
}

export const getStaticPaths = (async () => {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: {
      slug: post.slug,
    },
    props: { post, data: toBlogData(post) },
  }));
}) satisfies GetStaticPaths;

const { post, data } = Astro.props;
const { Content } = await post.render();
---

<Post
  section_title="PolyWolf's Blog"
  home_link="/blog/"
  title={data.title}
  description={data.description}
>
  <link
    slot="head"
    rel="alternate"
    type="application/rss+xml"
    title="PolyWolf's Blog"
    href={new URL("/blog/rss.xml", SITE_URL.origin)}
  />
  <div class="info">
    <h1>{data.title}</h1>
    <span
      >Published: {
        data.published.toLocaleString("en-US", { timeZone: "America/New_York" })
      }</span
    >
  </div>
  <div class="post">
    <Content />
  </div>
  <div class="tags">
    {data.tags.map((tag) => <TagLink tag={tag} />)}
  </div>
</Post>

<style>
  .info,
  .tags {
    background-color: var(--color-background-secondary);
    color: var(--color-text-secondary);

    padding: 16px;

    border-top: solid var(--dim-border) var(--color-border-primary);
    border-bottom: solid var(--dim-border) var(--color-border-primary);
  }

  .info h1 {
    margin: 0 0 8px;
  }

  .post {
    padding: 0 16px;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }
</style>
