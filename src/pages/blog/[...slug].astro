---
import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import { getCollection, render } from "astro:content";
import Post from "../../templates/Post.astro";
import { type BlogData, toBlogData } from "../../data/blog";
import TagLink from "../../components/blog/TagLink.astro";
import { atprotoPostUrl } from "../../data/url";

interface Props {
  post: CollectionEntry<"blog">;
  data: BlogData;
}

export const getStaticPaths = (async () => {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: {
      slug: post.id,
    },
    props: { post, data: toBlogData(post) },
  }));
}) satisfies GetStaticPaths;

const { post, data } = Astro.props;
const { Content } = await render(post);

const blueskyUrl = data.bluesky ? atprotoPostUrl(data.bluesky) : undefined;

// TODO: other h-entry properties: https://microformats.org/wiki/h-entry#Core_Properties
---

<Post
  sectionTitle="PolyWolf's Blog"
  homeLink="/blog/"
  title={data.title}
  description={data.description}
>
  <div class="info">
    <h1 class="p-name">{data.title}</h1>
    <span
      >Published:
      <time class="dt-published" datetime={data.published.toISOString()}
        >{
          data.published.toLocaleString("en-US", {
            timeZone: "America/New_York",
          })
        }</time
      >
    </span>
  </div>
  <article class="e-content">
    <Content />
  </article>
  <div class="tags">
    {data.tags.map((tag) => <TagLink tag={tag} />)}
  </div>
  {
    (data.mastodon || blueskyUrl) && (
      <div class="comments">
        {data.mastodon && <a href={data.mastodon}>Comment on Mastodon</a>}
        {blueskyUrl && <a href={blueskyUrl}>Comment on Bluesky</a>}
      </div>
    )
  }
</Post>

<style is:global>
  main {
    padding: 0 !important;
  }
</style>

<style lang="scss">
  @use "../../scss/dims";
  @use "../../scss/breakpoints";

  .info,
  .tags {
    background-color: var(--color-background-secondary);
    color: var(--color-text-secondary);

    padding: 16px;

    border-top: solid var(--dim-border) var(--color-border-primary);
    border-bottom: solid var(--dim-border) var(--color-border-primary);
  }

  .tags:not(:last-child) {
    border-bottom: none;
  }

  .comments {
    padding: 16px;

    border-top: solid var(--dim-border) var(--color-border-primary);
    border-bottom: solid var(--dim-border) var(--color-border-primary);
  }

  .info h1 {
    margin: 0 0 8px;
  }

  article {
    padding: 0 16px;
  }

  .tags,
  .comments {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  @media (min-width: breakpoints.$breakpoint-ipad) {
    .info {
      border-top: none;
    }
    .tags,
    .comments {
      border-bottom: none;
    }
  }
</style>
