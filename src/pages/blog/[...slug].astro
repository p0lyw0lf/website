---
import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import Base from "../../templates/Base.astro";
import { type BlogData, toBlogData } from "../../data/blog";
import TagLink from "../../components/blog/TagLink.astro";
import { SITE_URL } from "../../data/url";

interface Props {
  post: Pick<CollectionEntry<"blog">, "render">;
  data: BlogData;
}

export const getStaticPaths = (async () => {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: {
      slug: post.slug,
    },
    props: { post, data: toBlogData(post) },
  }));
}) satisfies GetStaticPaths;

const { post, data } = Astro.props;
const { Content } = await post.render();
---

<Base title={data.title} description={data.description}>
  <link
    slot="head"
    rel="alternate"
    type="application/rss+xml"
    title="PolyWolf's Blog"
    href={new URL("/blog/rss.xml", SITE_URL.origin)}
  />
  <h1 slot="header"><a href="/blog/">{data.title}</a></h1>
  <ul class="info">
    <li
      >Published: {
        data.published.toLocaleString("en-US", { timeZone: "America/New_York" })
      }</li
    >
    {
      data.tags.length > 0 && (
        <li>
          Tags:{" "}
          {data.tags.flatMap((tag) => [", ", <TagLink tag={tag} />]).slice(1)}
        </li>
      )
    }
  </ul>
  <Content />
</Base>
